#!/bin/bash

usage() {
cat << EOF
Usage: `basename $0` [options]

OPTIONS:
    -h, --help      Show this message.
    -f, --first-run Connects to the tivo and saves the show and tivo access info to the given files
    -s, --show-list File containing a list of shows titles to transcode.  default to '~/.tvt-shows'
    -t, --tivo      TiVo IP Address / host name.                          default to '~/.tvt-host'
    -m, --media-key Media Access Key                                      default to '~/.tvt-mak'
    -v, --verbose   Instructs the script to be verbose about what it's doing.
EOF
}

LONG_OPTIONS=0
FIRSTRUN=0
SHOWLIST=""
TIVO=""
MAK=""
VERBOSE=0

# Current date/time
DATE=`date +%Y%m%d%H%M`
GETSCRIPT="./get_$DATE.sh"

# Determine getopt support...
getopt -T
if [[ $? -eq 4 ]]; then
	set -- $(getopt -o "hfs:t:m:v" -l "help,first-run,show-list:,tivo:,media-key:,verbose" -- "$@")
else
	set -- $(getopt hfs:t:m:v "$@")
fi

while [ $# -gt 0 ]; do
	case "$1" in
		-h | --help ) usage; exit 1;;
		-f | --first-run ) FIRSTRUN=1; shift ;;
		-s | --show-list ) SHOWLIST="$2"; shift 2;;
		-t | --tivo ) TIVO="$2"; shift 2;;
		-m | --media-key ) MAK="$2"; shift 2;;
		-v | --verbose ) VERBOSE=1; shift;;
		-- ) shift; break;;
		-* ) echo "Unrecognized option $1" 1>&2; exit 1;;
		* )  break;;
	esac
done

if [[ "$SHOWLIST" == "" ]]; then
	SHOWLIST=$(readlink -f ~/.tvt-shows)
elif [[ "$SHOWLIST" == "-" ]]; then
	SHOWLIST="/dev/stdin"
fi

if [[ "$TIVO" == "" ]]; then
	TIVO=`cat ~/.tvt-host`
else
	TIVO=`echo $TIVO | sed -s "s/^\(\(\"\(.*\)\"\)\|\('\(.*\)'\)\)\$/\\3\\5/g"`
fi

if [[ "$MAK" == "" ]]; then
	MAK=`cat ~/.tvt-mak`
else
	MAK=`echo $MAK | sed -s "s/^\(\(\"\(.*\)\"\)\|\('\(.*\)'\)\)\$/\\3\\5/g"`
fi

PROCESSEDLIST=`readlink -f ~/.tvt-processed-shows`

if [[ "$VERBOSE" == "1" ]]; then
	echo "Showlist:  $SHOWLIST"
	echo "Processed: $PROCESSEDLIST"
	echo "Tivo:      $TIVO"
	echo "Mak:       $MAK"
	echo "Verbose:   $VERBOSE"
	echo "Firstrun:  $FIRSTRUN"
fi


if [[ "$FIRSTRUN" == "1" ]]; then
	# make sure the showlist isn't /dev/stdin
	if [[ "$SHOWLIST" == "/dev/stdin" ]]; then
		echo "You cannot save firstrun data to /dev/stdin. Please specify a show list file."
		usage
		exit 1
	fi

	# We need these options
	if [[ -z $TIVO ]] || [[ -z $MAK ]]; then
		usage
		exit 1
	fi
fi

if [[ "$FIRSTRUN" == "1" ]]; then
	echo "$TIVO" > ~/.tvt-host
	echo "$MAK" > ~/.tvt-mak
else
	if [[ ! -f $SHOWLIST ]]; then
		echo "Could not read from specified show list file: $SHOWLIST" 1>&2
		exit 1
	fi
fi

echo "Connecting as tivo@$TIVO to download Now Playing list...."
NOWPLAYING="`curl -s --digest -k -u tivo:$MAK "https://$TIVO/TiVoConnect?Command=QueryContainer&Container=%2FNowPlaying"`"
echo "Got it"

if [[ "$FIRSTRUN" == "1" ]]; then
	# Contact the TiVo at the given address, parse it's now playing for a list of shows.
	# We're going to write all the show names to the file. You can edit it when we're done.

	# Get the list of folders from the NOWPLAYING output, parsing out the URLs to get the episode lists.
	echo $NOWPLAYING | xsltproc lib/listfolders.xsl - | sed 's/|.*//g' > $SHOWLIST

	# Get the list of individual shows from the NOWPLAYING output.
	echo $NOWPLAYING | xsltproc lib/listshows.xsl - >> $SHOWLIST
else
	# Time to make the donuts!
	# ------------------------
	# Try to get a lockfile. If we can't get it, assume the lock is taken, and don't do anything. 
	# This lets us schedule the job on a regular interval and have it not interfere with itself.
	LOCKNAME="encode_$TIVO.lock"
	lockfile -10 -r 3 $LOCKNAME
	if [[ "$?" == "0" ]]; then

		# Clean up from the last run.
		echo "#!/bin/bash" > $GETSCRIPT

		# Make sure we have a file to keep a list of all the things we've already included.
		touch $PROCESSEDLIST

		# Read the list of shows from the input stream.
		SUBSCRIBED=()
		while read TITLE; do
			SUBSCRIBED+=("${TITLE}")
		done < $SHOWLIST



		for TITLE in "${SUBSCRIBED[@]}"; do
			echo "Looking for individual episodes of $TITLE"

			PROGRAMS=`echo $NOWPLAYING | xsltproc --stringparam ShowTitle "$TITLE" lib/programid.xsl - `
			for PROGRAMID in $PROGRAMS; do
				PROCESSED=`fgrep "$TITLE:$PROGRAMID" $PROCESSEDLIST`
				if [[ "$PROCESSED" == "" ]]; then
					echo "Including $TITLE:$PROGRAMID" 1>&2
					echo $NOWPLAYING | xsltproc --stringparam ShowTitle "$TITLE" --stringparam MAK "$MAK" --stringparam ProgramId "$PROGRAMID" --stringparam PROCESSEDLIST "$PROCESSEDLIST" lib/encodeshow.xsl - >> $GETSCRIPT
				else
					echo "Skipping $TITLE:$PROGRAMID. This episode has already been processed." 1>&2
				fi
			done

			if [[ "$PROGRAMS" == " " ]]; then
				TITLEPLAYINGURL=`echo $NOWPLAYING | xsltproc lib/listfolders.xsl - | grep "$TITLE" | sed 's/.*|//g'`
				echo "Getting the Now Playing list for episodes of $TITLE from $TITLEPLAYINGURL"

				TITLEPLAYING="`curl -s --digest -k -u tivo:$MAK "$TITLEPLAYINGURL"`"


				PROGRAMS=`echo $TITLEPLAYING | xsltproc --stringparam ShowTitle "$TITLE" lib/programid.xsl - `
				for PROGRAMID in $PROGRAMS; do
					PROCESSED=`fgrep "$TITLE:$PROGRAMID" $PROCESSEDLIST`
					if [[ "$PROCESSED" == "" ]]; then
						echo "Including $TITLE:$PROGRAMID" 1>&2
						echo $TITLEPLAYING | xsltproc --stringparam ShowTitle "$TITLE" --stringparam MAK "$MAK" --stringparam ProgramId "$PROGRAMID" --stringparam PROCESSEDLIST "$PROCESSEDLIST" lib/encodeshow.xsl - >> $GETSCRIPT
					else
						echo "Skipping $TITLE:$PROGRAMID. This episode has already been processed." 1>&2
					fi
				done
			fi
		done




		chmod +x $GETSCRIPT

		# Execute the generated file!
		$GETSCRIPT

		echo "Cleaning up locks & generated script."
		rm -f $LOCKNAME
		rm $GETSCRIPT
	else
		echo "Could not obtain lock, prior execution must be running."
	fi
fi


