#!/bin/bash

usage() {
	echo " Usage: `basename $0` -i <shows file> <tivoaddress> <mak>" 1>&2
        echo "       If <shows file> is omitted, the script looks for a file named '.shows'. You can use '-' to read from stdin" 1>&2
        echo "       If <tivoaddress> is omitted, the script looks for a file named '.tivo'" 1>&2
        echo "       If <mak> is omitted, you may place the media access key in a file named '.mediakey'" 1>&2
	exit 1
}

if [[ ! -n "$1" || "$1" != '-i' ]]; then
	usage
fi
if [[ ! -n "$2" && ! -f ".shows" ]]; then
	usage
fi
if [[ ! -n "$3" && ! -f ".tivo" ]]; then
	usage
fi
if [[ ! -n "$4" && ! -f ".mediakey" ]]; then
	usage
fi

# Each line from stdin or from the file named by the parameter or in .shows is a full title for a show to include in processing. (a subscription, if you will)
if [[ "$2" == '-' ]]; then
	INFILE="/dev/stdin"
else
	INFILE="$2"
	if [[ "$INFILE" == "" && -f ".shows" ]]; then
		INFILE=".shows"
	fi
fi

# tivo address
TIVO="$3"
if [[ "$TIVO" == "" && -f ".tivo" ]]; then
	TIVO=`cat .tivo`
fi

# media access key
MAK="$4"
if [[ "$MAK" == "" && -f ".mediakey" ]]; then
	MAK=`cat .mediakey`
fi

# Current date/time
DATE=`date +%Y%m%d%H%M`
GETSCRIPT="./get_$DATE.sh"

# Time to make the donuts!
# ------------------------
# Try to get a lockfile. If we can't get it, assume the lock is taken, and don't do anything. 
# This lets us schedule the job on a regular interval and have it not interfere with itself.
LOCKNAME="encode_$TIVO.lock"
lockfile -10 -r 3 $LOCKNAME
if [[ "$?" == "0" ]]; then

	# Clean up from the last run.
	echo "#!/bin/bash" > $GETSCRIPT
    
	# Make sure we have a file named .processed_shows to keep a list of all the things we've already included.
	touch .processed_shows
	
	echo "Downloading list of shows from the tivo..."
	#echo "Downloading nowplaying list from https://$TIVO/TiVoConnect?Command=QueryContainer&Container=%2FNowPlaying&Recurse=Yes" 1>&2
	NOWPLAYING="`curl -s --digest -k -u tivo:$MAK "https://$TIVO/TiVoConnect?Command=QueryContainer&Container=%2FNowPlaying&Recurse=Yes"`"
	
	echo "Reading show list from $INFILE" 1>&2
	while read TITLE; do
		PROGRAMS=`echo $NOWPLAYING | xsltproc --stringparam ShowTitle "$TITLE" lib/programid.xsl - `
		for PROGRAMID in $PROGRAMS; do
			PROCESSED=`fgrep "$TITLE:$PROGRAMID" .processed_shows`
			if [[ "$PROCESSED" == "" ]]; then
				echo "Including $TITLE:$PROGRAMID" 1>&2
				echo $NOWPLAYING | xsltproc --stringparam ShowTitle "$TITLE" --stringparam MAK "$MAK" --stringparam ProgramId "$PROGRAMID" lib/encodeshow.xsl - >> $GETSCRIPT
			else
				echo "Skipping $TITLE:$PROGRAMID it's already been processed." 1>&2
			fi
		done
	done < $INFILE
	chmod +x $GETSCRIPT
	
	# Execute the generated file!
	$GETSCRIPT
	
	echo "Cleaning up locks & generated script."
	rm -f $LOCKNAME
	rm $GETSCRIPT
else 
	echo "Could not obtain lock, prior execution must be running."
fi

